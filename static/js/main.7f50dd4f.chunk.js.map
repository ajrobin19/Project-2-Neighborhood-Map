{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","map","initialized","refresh","renderMap","url","index","window","document","getElementsByTagName","script","createElement","src","async","defer","onerror","alert","parentNode","insertBefore","loadScript","initMap","setState","google","maps","Map","getElementById","center","lat","lng","zoom","mapTypeControlOptions","style","MapTypeControlStyle","HORIZONTAL_BAR","position","ControlPosition","TOP_CENTER","infoWindow","InfoWindow","bounds","LatLngBounds","getRestaurants","jsonData","results","forEach","restaurant","restaurants","push","completeRestaurantsList","getPlaces","markers","length","removeMarkers","self","assertThisInitialized","input","value","fetch","then","response","json","contents","catch","e","console","log","i","setMap","filterRestaurants","filterCategory","filter","types","dropMarker","marker","Marker","geometry","location","title","name","animation","Animation","DROP","id","extend","fitBounds","addListener","createAndOpenInfoWindow","getMarker","openInfoWindow","businessInfo","setContent","concat","display_address","display_phone","rating","review_count","open","app","setZoom","setAnimation","BOUNCE","setTimeout","myHeaders","Headers","append","proxyUrl","formatted_address","headers","businessIdArray","businesses","hamburgerClick","menuContainter","visibility","width","_this2","react_default","a","onClick","className","lib","type","minLength","debounceTimeout","placeholder","onChange","undefined","key","tabIndex","aria-label","onKeyPress","keyCode","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f50dd4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport jsonData from '../src/data/restaurants.json';\nimport {DebounceInput} from 'react-debounce-input'\nimport './App.css';\n\nclass App extends Component {\n  \t//Items that need to be globablly available. Used the state for the following items so that the app would re-render.\n  \tstate = {\n  \t\tmap: \"\",\n  \t\tinitialized: false,\n  \t\trefresh: 'no'\n  \t}\n\n  \t//Items that need to be globally available.\n  \tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.restaurants = []\n\t\tthis.completeRestaurantsList = []\n\t\tthis.markers = []\n\t\tthis.infoWindow = ''\n\t\tthis.bounds = ''\n\t}\n\n\t//This calls for the map to be rendered and grabs the list of restaurants.\n  \tcomponentWillMount() {\n\t    this.renderMap()\n\t    // this.getRestaurants()\n  \t}\n\n  \t//Gets the map and calls the function to initialize it.\n\trenderMap = () => {\n\t    //The following code was created with help from elharony at https://github.com/elharony/Udacity-P8-Neighborhood-Map-Project-Explained/blob/master/src/App.js\n\t    loadScript(\"https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyB9R7iubdV_Xn3N9A8m_90v-0SyYZ4DhUg&v=3&callback=initMap\")\n\t    window.initMap = this.initMap\n\t}\n\n\t//Initializes the map and saves it to the state.\n  \tinitMap = () => {\n    \tthis.setState(() => ({map : new window.google.maps.Map(document.getElementById('map'), {\n     \t\tcenter: {lat: 39.1836, lng: -96.5717},\n      \t\tzoom: 15,\n      \t\tmapTypeControlOptions: {\n              style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n              position: window.google.maps.ControlPosition.TOP_CENTER\n          \t}\n    \t}),\n\t\t\tinitialized: true\n\t\t}))\n\t\tthis.infoWindow = new window.google.maps.InfoWindow()\n\t\tthis.bounds = new window.google.maps.LatLngBounds()\n  \t}\n\n  \t//Gets the list of restaurants from JSON file and saves it to the constructor props.\n  \tgetRestaurants = () => {\n\t\tjsonData.results.forEach((restaurant) => {\n\t\t\tthis.restaurants.push(restaurant)\n\t\t\tthis.completeRestaurantsList.push(restaurant)\n\t\t})\n  \t}\n\n  \tgetPlaces = () => {\n  \t\tif(this.markers.length !== 0){\n  \t\t\tthis.removeMarkers()\n  \t\t\tthis.bounds = new window.google.maps.LatLngBounds()\n  \t\t}\n\n  \t\tconst self = this\n\n\t\tconst input = document.getElementById('placesSearch').value;\n\t\tconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"\n\t\tconst url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?query=\" +input +\"&location=39.1836,-96.5717&radius=100&key=AIzaSyB9R7iubdV_Xn3N9A8m_90v-0SyYZ4DhUg\"\n\t\tfetch(proxyurl + url) // https://cors-anywhere.herokuapp.com/https://example.com\n\t\t.then(response => response.json())\n\t\t.then(function(contents){\n\t\t\tcontents.results.forEach((restaurant) => {\n\t\t\t\tself.restaurants.push(restaurant)\n\t\t\t\tself.completeRestaurantsList.push(restaurant)\n\t\t\t})\n\t\t\tself.setState(() => ({refresh:'yes'}))\n\t\t})\n\t\t.catch((e) => console.log(e))\n  \t}\n\n  \t//Removes the markers from the map and erases the array.\n  \tremoveMarkers = () => {\n  \t\tfor (var i = 0; i < this.markers.length; i++) {\n        \tthis.markers[i].setMap(null);\n        }\n\n        this.markers = []\n        this.restaurants = []\n\n        this.setState(() => ({refresh:'yes'}))\n  \t}\n\n  \t//Filters the list of restaurants and the markers according to the filter value.\n  \tfilterRestaurants = () => {\n  \t\tthis.removeMarkers()\n\n  \t\tthis.restaurants = this.completeRestaurantsList\n\n  \t\tvar filterCategory = document.getElementById('filter').value\n\n  \t\tif(filterCategory !== 'none'){\n  \t\t\tthis.restaurants = this.restaurants.filter(restaurant => restaurant.types === filterCategory)\n  \t\t}\n\n  \t\tthis.setState(() => ({refresh:'yes'}))\n  \t}\n\n  \t//Places the markers on the map\n  \tdropMarker = (restaurant) => {\n  \t\tvar map = this.state.map\n  \t\tvar bounds = this.bounds\n\n  \t\tvar marker = new window.google.maps.Marker({\n\t    \tmap: map,\n\t   \t\tposition: {lat: restaurant.geometry.location.lat, lng: restaurant.geometry.location.lng},\n    \t\ttitle: restaurant.name,\n    \t\tanimation: window.google.maps.Animation.DROP,\n    \t\tid: restaurant.id\n\t\t});\n\n\t\tbounds.extend(marker.position)\n\t\tmap.fitBounds(bounds)\n\n  \t\tthis.markers.push(marker)\n\n\t\tvar self = this\n\t\tmarker.addListener('click', function(){\n\t\t\tself.createAndOpenInfoWindow(restaurant)\n\t\t})\n  \t}\n\n  \t//Retrieves and returns the marker in need\n  \tgetMarker = (restaurant) => {\n  \t\tvar marker = this.markers.filter(marker => restaurant.id === marker.id)\n\n  \t\treturn marker[0]\n  \t}\n\n  \t//Sets and opens the info window for the restaurant that has been chosen.\n  \topenInfoWindow = (marker, businessInfo) => {\n  \t\tthis.infoWindow.setContent(\n  \t\t\t\t`<div className='infoWindow'>\n\t\t\t\t\t<h2 class='centerText'>${businessInfo.name}</h2>\n\t\t\t\t\t<p><b>Address: </b>${businessInfo.location.display_address[0]}, ${businessInfo.location.display_address[1]}</p>\n\t\t\t\t\t<p><b>Phone: </b>${businessInfo.display_phone}</p>\n\t\t\t\t\t<p><b>Yelp Rating: </b>${businessInfo.rating} stars from ${businessInfo.review_count} reviews</p>\n\t\t\t\t\t<p><b>Yelp Website: </b><a href='${businessInfo.url}' target='_blank'>${businessInfo.name}</a></p>\n\t\t\t\t</div>`\n\t\t\t)\n  \t\tthis.infoWindow.open(this.state.map, marker)\n  \t}\n\n  \t//Pops up a loading info window and gathers all of the information for the info window. Fetches the restraunt information through the Yelp API. Sends it all to the openInfoWindow function to complete the process.\n  \tcreateAndOpenInfoWindow = (restaurant) => {\n  \t\tvar marker = this.getMarker(restaurant)\n  \t\tvar bounds = new window.google.maps.LatLngBounds()\n  \t\tvar map = this.state.map\n  \t\tvar app = this\n\n  \t\tbounds.extend(marker.position)\n\t\tmap.fitBounds(bounds)\n\t\tmap.setZoom(18)\n\n  \t\tmarker.setAnimation(window.google.maps.Animation.BOUNCE)\n      \tsetTimeout(function(){marker.setAnimation(null)}, 1000)\n\n  \t\tthis.infoWindow.setContent(`<div>Loading...</div>`)\n  \t\tthis.infoWindow.open(this.state.map, marker)\n\n\t\tconst apiKey = \"qRuURpX1yy2KItA1p3K4daciEhOhqRNKKqxCR72jVjGvDZkJGoUls2-sjLfS8JXzPRIlKqIATD2nNqZDg3Jl-fZGhQNcOTlyP6LI28T8-MTAxJb2wuTYixTd6HHmW3Yx\";\n\t\tlet myHeaders = new Headers();\n\t\tmyHeaders.append(\"Authorization\", \"Bearer \" + apiKey);\n\t\tconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\"\n\n\t\tfetch(proxyUrl +\"https://api.yelp.com/v3/businesses/search?location=\" +restaurant.formatted_address +\"&term=\" +restaurant.name, {headers: myHeaders})\n\t\t.then(response => response.json())\n\t\t.then(businessIdArray => businessIdArray.businesses[0])\n\t\t.then(function(businessInfo){\n\t\t\tapp.openInfoWindow(marker, businessInfo)\n\t\t})\n\t\t.catch(function(){\n\t\t\tapp.infoWindow.setContent(`<div>Our apologies. An error occured when loading the information for this location.</div>`)\n  \t\t\tapp.infoWindow.open(app.state.map, marker)\n\t\t})\n  \t}\n\n  \t//Function to handle what happens when the hamburger menu is clicked.\n  \thamburgerClick = () => {\n  \t\tvar menuContainter = document.getElementById('menuContainter')\n\n  \t\tif(menuContainter.style.visibility === 'hidden'){\n  \t\t\tmenuContainter.style.visibility = 'visible'\n  \t\t\tdocument.getElementById('menu').style.width = \"20vw\"\n  \t\t}\n  \t\telse{\n  \t\t\tmenuContainter.style.visibility = 'hidden'\n  \t\t\tdocument.getElementById('menu').style.width = \"45px\"\n  \t\t}\n\t}\n\n  \trender() {\n    \treturn (\n     \t\t<main>\n        \t\t<div id=\"menu\">\n\t        \t\t<div id='hamburgerButton' onClick={this.hamburgerClick}>\n\t        \t\t\t<div className='hamburger'></div>\n\t        \t\t\t<div className='hamburger'></div>\n\t        \t\t\t<div className='hamburger'></div>\n\t    \t\t\t</div>\n\t        \t\t<div id=\"menuContainter\">\n\t        \t\t\t<h4 className='searchBusinesses'>Search for Businesses</h4>\n\t        \t\t\t<DebounceInput type=\"text\" id=\"placesSearch\" minLength={1} debounceTimeout={1000} placeholder=\"Search\" onChange={this.getPlaces}/>\n\t        \t\t\t<div id='menuList'>\n\t        \t\t\t\t{this.restaurants !== undefined && this.restaurants.map((restaurant) =>\n\t        \t\t\t\t\t<div key={restaurant.id} tabIndex={0} aria-label={restaurant.name} onKeyPress={(e) => (e.keyCode === 0) && (this.createAndOpenInfoWindow(restaurant))} onClick={() => (this.createAndOpenInfoWindow(restaurant))}>\n\t        \t\t\t\t\t\t{this.state.initialized && this.dropMarker(restaurant)}\n\t        \t\t\t\t\t\t<hr />\n\t        \t\t\t\t\t\t<h5 id={restaurant.id} >{restaurant.name}</h5>\n\t        \t\t\t\t\t</div>\n\t        \t\t\t\t)}\n\t        \t\t\t</div>\n\t          \t\t</div>\n        \t\t</div>\n        \t\t<div id=\"map\"></div>\n      \t\t</main>\n    \t)\n  \t}\n}\n\nfunction loadScript(url) {\n  var index  = window.document.getElementsByTagName(\"script\")[0]\n  var script = window.document.createElement(\"script\")\n  script.src = url\n  script.async = true\n  script.defer = true\n  script.onerror = function(){window.alert('There has been a problem loading Google Maps')}\n  index.parentNode.insertBefore(script, index)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}